// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ResearchPaper {
  id          String      @id @default(uuid())
  title       String
  publication String?
  year        Int?
  abstract    String?
  keywords    String[]    @default([])
  filePath    String?
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  authors     Author[]    @relation("PaperAuthors")
  citations   Citation[]

  user        User?     @relation(fields: [userId], references: [id])
  userId      String?   // Optional: To associate paper with a user
}

model Author {
  id         String   @id @default(uuid())
  firstName  String
  lastName   String
  middleName String?
  orcid      String?  @unique // ORCID should be unique if provided
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  papers     ResearchPaper[] @relation("PaperAuthors")
}

model Citation {
  id        String   @id @default(uuid())
  key       String   // e.g., Knuth1968 - should ideally be unique per paper or globally
  type      String   // e.g., article, book
  fields    Json     // Stores dynamic fields like { "author": "...", "title": "..." }
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  researchPaper   ResearchPaper @relation(fields: [researchPaperId], references: [id])
  researchPaperId String

  @@unique([researchPaperId, key]) // Ensures citation key is unique within a given paper
}

// Project Management
model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  status      String   // e.g., "Not Started", "In Progress", "Completed", "On Hold"
  dueDate     DateTime?
  progress    Int?     // 0-100
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User?    @relation(fields: [userId], references: [id])
  userId      String?  // Optional: To associate project with a user
}

// Workout Planner
model Workout {
  id        String    @id @default(uuid())
  name      String
  date      DateTime  // YYYY-MM-DD
  completed Boolean   @default(false)
  notes     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  exercises Exercise[]

  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  // Optional: To associate workout with a user
}

model Exercise {
  id        String  @id @default(uuid())
  name      String
  sets      Int
  reps      Int
  weight    Float   // Using Float for weight to allow decimals
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workout   Workout @relation(fields: [workoutId], references: [id])
  workoutId String
}

// NextAuth.js Models
model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Optional relations to your existing models
  projects      Project[]
  researchPapers ResearchPaper[]
  workouts      Workout[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
